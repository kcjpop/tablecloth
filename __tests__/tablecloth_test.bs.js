// Generated by BUCKLESCRIPT VERSION 6.0.0-dev.1, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Tablecloth = require("../src/tablecloth.bs.js");

describe("Array", (function () {
        describe("empty", (function () {
                Jest.test("has length zero", (function (param) {
                        return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* length */2](Tablecloth.$$Array[/* empty */0])));
                      }));
                return Jest.test("equals the empty array literal", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* array */[], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* empty */0]));
                            }));
              }));
        describe("singleton", (function () {
                Jest.test("equals an array literal of the same value", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[1234], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* singleton */1](1234)));
                      }));
                return Jest.test("has length one", (function (param) {
                              return Jest.Expect[/* toEqual */12](1, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* length */2](Tablecloth.$$Array[/* singleton */1](1))));
                            }));
              }));
        describe("length", (function () {
                Jest.test("equals an array literal of the same value", (function (param) {
                        return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* length */2](/* array */[])));
                      }));
                Jest.test("has length one", (function (param) {
                        return Jest.Expect[/* toEqual */12](1, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* length */2](/* array */[/* "a" */97])));
                      }));
                return Jest.test("has length two", (function (param) {
                              return Jest.Expect[/* toEqual */12](2, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* length */2](/* array */[
                                                  "a",
                                                  "b"
                                                ])));
                            }));
              }));
        describe("isEmpty", (function () {
                Jest.test("returns true for empty array literals", (function (param) {
                        return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* isEmpty */3](/* array */[])));
                      }));
                return Jest.test("returns false for literals with a non-zero number of elements", (function (param) {
                              return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* isEmpty */3](/* array */[1234])));
                            }));
              }));
        describe("initialize", (function () {
                Jest.test("create empty array", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* initialize */5](0, Tablecloth.identity)));
                      }));
                Jest.test("negative length gives an empty array", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* initialize */5](-1, Tablecloth.identity)));
                      }));
                return Jest.test("create array with initialize", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* array */[
                                          0,
                                          1,
                                          2
                                        ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* initialize */5](3, Tablecloth.identity)));
                            }));
              }));
        describe("repeat", (function () {
                Jest.test("length zero creates an empty array", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* repeat */6](0, 0)));
                      }));
                Jest.test("negative length gives an empty array", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* repeat */6](-1, 0)));
                      }));
                Jest.test("create array of ints", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[
                                    0,
                                    0,
                                    0
                                  ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* repeat */6](3, 0)));
                      }));
                return Jest.test("create array strings", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* array */[
                                          "cat",
                                          "cat",
                                          "cat"
                                        ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* repeat */6](3, "cat")));
                            }));
              }));
        describe("range", (function () {
                Jest.test("returns an array of the integers from zero and upto but not including [to]", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[
                                    0,
                                    1,
                                    2,
                                    3,
                                    4
                                  ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* range */7](undefined, 5)));
                      }));
                Jest.test("returns an empty array when [to] is zero", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* range */7](undefined, 0)));
                      }));
                Jest.test("takes an optional [from] argument to start create empty array", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[
                                    2,
                                    3,
                                    4
                                  ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* range */7](2, 5)));
                      }));
                Jest.test("can start from negative values", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[
                                    -2,
                                    -1,
                                    0,
                                    1,
                                    2
                                  ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* range */7](-2, 3)));
                      }));
                return Jest.test("returns an empty array when [from] > [to_]", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* array */[], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* range */7](5, 0)));
                            }));
              }));
        describe("fromList", (function () {
                return Jest.test("transforms a list into an array of the same elements", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* array */[
                                          1,
                                          2,
                                          3
                                        ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* fromList */8](/* :: */Block.simpleVariant("::", [
                                                    1,
                                                    /* :: */Block.simpleVariant("::", [
                                                        2,
                                                        /* :: */Block.simpleVariant("::", [
                                                            3,
                                                            /* [] */0
                                                          ])
                                                      ])
                                                  ]))));
                            }));
              }));
        describe("toList", (function () {
                return Jest.test("transform an array into a list of the same elements", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* :: */Block.simpleVariant("::", [
                                            1,
                                            /* :: */Block.simpleVariant("::", [
                                                2,
                                                /* :: */Block.simpleVariant("::", [
                                                    3,
                                                    /* [] */0
                                                  ])
                                              ])
                                          ]), Jest.Expect[/* expect */0](Tablecloth.$$Array[/* toList */10](/* array */[
                                                  1,
                                                  2,
                                                  3
                                                ])));
                            }));
              }));
        describe("toIndexedList", (function () {
                Jest.test("returns an empty list for an empty array", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* [] */0, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* toIndexedList */12](/* array */[])));
                      }));
                return Jest.test("transforms an array into a list of tuples", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* :: */Block.simpleVariant("::", [
                                            /* tuple */[
                                              0,
                                              "cat"
                                            ],
                                            /* :: */Block.simpleVariant("::", [
                                                /* tuple */[
                                                  1,
                                                  "dog"
                                                ],
                                                /* [] */0
                                              ])
                                          ]), Jest.Expect[/* expect */0](Tablecloth.$$Array[/* toIndexedList */12](/* array */[
                                                  "cat",
                                                  "dog"
                                                ])));
                            }));
              }));
        describe("get", (function () {
                Jest.test("returns Some for an in-bounds indexe", (function (param) {
                        return Jest.Expect[/* toEqual */12]("eel", Jest.Expect[/* expect */0](Tablecloth.$$Array[/* get */14](2, /* array */[
                                            "cat",
                                            "dog",
                                            "eel"
                                          ])));
                      }));
                Jest.test("returns None for an out of bounds index", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* get */14](5, /* array */[
                                            0,
                                            1,
                                            2
                                          ])));
                      }));
                return Jest.test("returns None for an empty array", (function (param) {
                              return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* get */14](0, /* array */[])));
                            }));
              }));
        describe("set", (function () {
                Jest.test("can be partially applied to set an element", (function (param) {
                        var func = Tablecloth.$$Array[/* set */15];
                        var numbers = /* array */[
                          1,
                          2,
                          3
                        ];
                        Curry._3(func, 2, 0, numbers);
                        Curry._3(func, 1, 0, numbers);
                        return Jest.Expect[/* toEqual */12](/* array */[
                                    1,
                                    0,
                                    0
                                  ], Jest.Expect[/* expect */0](numbers));
                      }));
                return Jest.test("can be partially applied to set an index", (function (param) {
                              var partial_arg = Tablecloth.$$Array[/* set */15];
                              var setZerothElement = function (param, param$1) {
                                return partial_arg(0, param, param$1);
                              };
                              var animals = /* array */[
                                "ant",
                                "bat",
                                "cat"
                              ];
                              Curry._2(setZerothElement, "antelope", animals);
                              return Jest.Expect[/* toEqual */12](/* array */[
                                          "antelope",
                                          "bat",
                                          "cat"
                                        ], Jest.Expect[/* expect */0](animals));
                            }));
              }));
        describe("sum", (function () {
                Jest.test("equals zero for an empty array", (function (param) {
                        return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* sum */16](/* array */[])));
                      }));
                return Jest.test("adds up the elements on an integer array", (function (param) {
                              return Jest.Expect[/* toEqual */12](6, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* sum */16](/* array */[
                                                  1,
                                                  2,
                                                  3
                                                ])));
                            }));
              }));
        describe("floatSum", (function () {
                Jest.test("equals zero for an empty array", (function (param) {
                        return Jest.Expect[/* toEqual */12](0.0, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* floatSum */17](/* array */[])));
                      }));
                return Jest.test("adds up the elements of a float array", (function (param) {
                              return Jest.Expect[/* toEqual */12](6.9, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* floatSum */17](/* array */[
                                                  1.2,
                                                  2.3,
                                                  3.4
                                                ])));
                            }));
              }));
        describe("filter", (function () {
                return Jest.test("keep elements that [f] returns [true] for", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* array */[
                                          2,
                                          4,
                                          6
                                        ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* filter */19](Tablecloth.Int[/* isEven */1], /* array */[
                                                  1,
                                                  2,
                                                  3,
                                                  4,
                                                  5,
                                                  6
                                                ])));
                            }));
              }));
        describe("map", (function () {
                return Jest.test("Apply a function [f] to every element in an array", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* array */[
                                          1.0,
                                          2.0,
                                          3.0
                                        ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* map */20]((function (prim) {
                                                    return Math.sqrt(prim);
                                                  }), /* array */[
                                                  1.0,
                                                  4.0,
                                                  9.0
                                                ])));
                            }));
              }));
        describe("mapWithIndex", (function () {
                return Jest.test("equals an array literal of the same value", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* array */[
                                          0,
                                          5,
                                          10
                                        ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* mapWithIndex */21](Caml_int32.imul, /* array */[
                                                  5,
                                                  5,
                                                  5
                                                ])));
                            }));
              }));
        describe("map2", (function () {
                Jest.test("works when the order of arguments to `f` is not important", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[
                                    5,
                                    7,
                                    9
                                  ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* map2 */24]((function (prim, prim$1) {
                                              return prim + prim$1 | 0;
                                            }), /* array */[
                                            1,
                                            2,
                                            3
                                          ], /* array */[
                                            4,
                                            5,
                                            6
                                          ])));
                      }));
                return Jest.test("works when the order of `f` is important", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* array */[
                                          /* tuple */[
                                            "alice",
                                            2
                                          ],
                                          /* tuple */[
                                            "bob",
                                            5
                                          ],
                                          /* tuple */[
                                            "chuck",
                                            7
                                          ]
                                        ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* map2 */24](Tablecloth.Tuple2[/* create */0], /* array */[
                                                  "alice",
                                                  "bob",
                                                  "chuck"
                                                ], /* array */[
                                                  2,
                                                  5,
                                                  7,
                                                  8
                                                ])));
                            }));
              }));
        Jest.test("map3", (function (param) {
                return Jest.Expect[/* toEqual */12](/* array */[
                            /* tuple */[
                              "alice",
                              2,
                              true
                            ],
                            /* tuple */[
                              "bob",
                              5,
                              false
                            ],
                            /* tuple */[
                              "chuck",
                              7,
                              true
                            ]
                          ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* map3 */25](Tablecloth.Tuple3[/* create */0], /* array */[
                                    "alice",
                                    "bob",
                                    "chuck"
                                  ], /* array */[
                                    2,
                                    5,
                                    7,
                                    8
                                  ], /* array */[
                                    true,
                                    false,
                                    true,
                                    false
                                  ])));
              }));
        Jest.test("flatMap", (function (param) {
                var duplicate = function (n) {
                  return /* array */[
                          n,
                          n
                        ];
                };
                return Jest.Expect[/* toEqual */12](/* array */[
                            1,
                            1,
                            2,
                            2,
                            3,
                            3
                          ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* flatMap */26](duplicate, /* array */[
                                    1,
                                    2,
                                    3
                                  ])));
              }));
        describe("find", (function () {
                Jest.test("returns the first element which `f` returns true for", (function (param) {
                        return Jest.Expect[/* toEqual */12](4, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* find */28](Tablecloth.Int[/* isEven */1], /* array */[
                                            1,
                                            3,
                                            4,
                                            8
                                          ])));
                      }));
                Jest.test("returns `None` if `f` returns false for all elements ", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* find */28](Tablecloth.Int[/* isOdd */3], /* array */[
                                            0,
                                            2,
                                            4,
                                            8
                                          ])));
                      }));
                return Jest.test("returns `None` for an empty array", (function (param) {
                              return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* find */28](Tablecloth.Int[/* isEven */1], /* array */[])));
                            }));
              }));
        describe("any", (function () {
                Jest.test("returns false for empty arrays", (function (param) {
                        return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* any */29](Tablecloth.Int[/* isEven */1], /* array */[])));
                      }));
                Jest.test("returns true if at least one of the elements of an array return true for [f]", (function (param) {
                        return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* any */29](Tablecloth.Int[/* isEven */1], /* array */[
                                            1,
                                            3,
                                            4,
                                            5,
                                            7
                                          ])));
                      }));
                return Jest.test("returns false if all of the elements of an array return false for [f]", (function (param) {
                              return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* any */29](Tablecloth.Int[/* isEven */1], /* array */[
                                                  1,
                                                  3,
                                                  5,
                                                  7
                                                ])));
                            }));
              }));
        describe("all", (function () {
                Jest.test("returns true for empty arrays", (function (param) {
                        return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* all */30](Tablecloth.Int[/* isEven */1], /* array */[])));
                      }));
                Jest.test("returns true if [f] returns true for all elements", (function (param) {
                        return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* all */30](Tablecloth.Int[/* isEven */1], /* array */[
                                            2,
                                            4
                                          ])));
                      }));
                return Jest.test("returns false if a single element fails returns false for [f]", (function (param) {
                              return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* all */30](Tablecloth.Int[/* isEven */1], /* array */[
                                                  2,
                                                  3
                                                ])));
                            }));
              }));
        Jest.test("append", (function (param) {
                return Jest.Expect[/* toEqual */12](/* array */[
                            42,
                            42,
                            81,
                            81,
                            81
                          ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* append */31](Tablecloth.$$Array[/* repeat */6](2, 42), Tablecloth.$$Array[/* repeat */6](3, 81))));
              }));
        Jest.test("concatenate", (function (param) {
                return Jest.Expect[/* toEqual */12](/* array */[
                            1,
                            2,
                            3,
                            4,
                            5
                          ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* concatenate */32](/* array */[
                                    /* array */[
                                      1,
                                      2
                                    ],
                                    /* array */[3],
                                    /* array */[
                                      4,
                                      5
                                    ]
                                  ])));
              }));
        describe("intersperse", (function () {
                Jest.test("equals an array literal of the same value", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[
                                    "turtles",
                                    "on",
                                    "turtles",
                                    "on",
                                    "turtles"
                                  ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* intersperse */33]("on", /* array */[
                                            "turtles",
                                            "turtles",
                                            "turtles"
                                          ])));
                      }));
                return Jest.test("equals an array literal of the same value", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* array */[], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* intersperse */33](0, /* array */[])));
                            }));
              }));
        describe("slice", (function () {
                var array = /* array */[
                  0,
                  1,
                  2,
                  3,
                  4
                ];
                var positiveArrayLengths_000 = Tablecloth.$$Array[/* length */2](array);
                var positiveArrayLengths_001 = /* :: */Block.simpleVariant("::", [
                    Tablecloth.$$Array[/* length */2](array) + 1 | 0,
                    /* :: */Block.simpleVariant("::", [
                        1000,
                        /* [] */0
                      ])
                  ]);
                var positiveArrayLengths = /* :: */Block.simpleVariant("::", [
                    positiveArrayLengths_000,
                    positiveArrayLengths_001
                  ]);
                var negativeArrayLengths = Tablecloth.List[/* map */4](Tablecloth.Int[/* negate */0], positiveArrayLengths);
                Jest.test("should work with a positive `from`", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[
                                    1,
                                    2,
                                    3,
                                    4
                                  ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* slice */34](1, undefined, array)));
                      }));
                Jest.test("should work with a negative `from`", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[4], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* slice */34](-1, undefined, array)));
                      }));
                Jest.testAll("should work when `from` >= `length`", positiveArrayLengths, (function (from) {
                        return Jest.Expect[/* toEqual */12](/* array */[], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* slice */34](from, undefined, array)));
                      }));
                Jest.testAll("should work when `from` <= negative `length`", negativeArrayLengths, (function (from) {
                        return Jest.Expect[/* toEqual */12](array, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* slice */34](from, undefined, array)));
                      }));
                Jest.test("should work with a positive `to_`", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[
                                    0,
                                    1,
                                    2
                                  ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* slice */34](0, 3, array)));
                      }));
                Jest.test("should work with a negative `to_`", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[
                                    1,
                                    2,
                                    3
                                  ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* slice */34](1, -1, array)));
                      }));
                Jest.testAll("should work when `to_` >= length", positiveArrayLengths, (function (to_) {
                        return Jest.Expect[/* toEqual */12](array, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* slice */34](0, to_, array)));
                      }));
                Jest.testAll("should work when `to_` <= negative `length`", negativeArrayLengths, (function (to_) {
                        return Jest.Expect[/* toEqual */12](/* array */[], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* slice */34](0, to_, array)));
                      }));
                Jest.test("should work when both `from` and `to_` are negative and `from` < `to_`", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[3], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* slice */34](-2, -1, array)));
                      }));
                return Jest.test("works when `from` >= `to_`", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* array */[], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* slice */34](4, 3, array)));
                            }));
              }));
        describe("foldLeft", (function () {
                Jest.test("works for an empty array", (function (param) {
                        return Jest.Expect[/* toEqual */12]("", Jest.Expect[/* expect */0](Tablecloth.$$Array[/* foldLeft */35]((function (prim, prim$1) {
                                              return prim + prim$1;
                                            }), "", /* array */[])));
                      }));
                Jest.test("works for an ascociative operator", (function (param) {
                        return Jest.Expect[/* toEqual */12](2401, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* foldLeft */35](Caml_int32.imul, 1, Tablecloth.$$Array[/* repeat */6](4, 7))));
                      }));
                Jest.test("works when the order of arguments to `f` is important", (function (param) {
                        return Jest.Expect[/* toEqual */12]("cba", Jest.Expect[/* expect */0](Tablecloth.$$Array[/* foldLeft */35]((function (prim, prim$1) {
                                              return prim + prim$1;
                                            }), "", /* array */[
                                            "a",
                                            "b",
                                            "c"
                                          ])));
                      }));
                return Jest.test("works when the order of arguments to `f` is important", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* :: */Block.simpleVariant("::", [
                                            3,
                                            /* :: */Block.simpleVariant("::", [
                                                2,
                                                /* :: */Block.simpleVariant("::", [
                                                    1,
                                                    /* [] */0
                                                  ])
                                              ])
                                          ]), Jest.Expect[/* expect */0](Tablecloth.$$Array[/* foldLeft */35]((function (element, list) {
                                                    return /* :: */Block.simpleVariant("::", [
                                                              element,
                                                              list
                                                            ]);
                                                  }), /* [] */0, /* array */[
                                                  1,
                                                  2,
                                                  3
                                                ])));
                            }));
              }));
        describe("foldRight", (function () {
                Jest.test("works for empty arrays", (function (param) {
                        return Jest.Expect[/* toEqual */12]("", Jest.Expect[/* expect */0](Tablecloth.$$Array[/* foldRight */37]((function (prim, prim$1) {
                                              return prim + prim$1;
                                            }), "", /* array */[])));
                      }));
                Jest.test("fold right", (function (param) {
                        return Jest.Expect[/* toEqual */12](15, Jest.Expect[/* expect */0](Tablecloth.$$Array[/* foldRight */37]((function (prim, prim$1) {
                                              return prim + prim$1 | 0;
                                            }), 0, Tablecloth.$$Array[/* repeat */6](3, 5))));
                      }));
                Jest.test("works when the order of arguments to `f` is important", (function (param) {
                        return Jest.Expect[/* toEqual */12]("abc", Jest.Expect[/* expect */0](Tablecloth.$$Array[/* foldRight */37]((function (prim, prim$1) {
                                              return prim + prim$1;
                                            }), "", /* array */[
                                            "a",
                                            "b",
                                            "c"
                                          ])));
                      }));
                return Jest.test("works when the order of arguments to `f` is important", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* :: */Block.simpleVariant("::", [
                                            1,
                                            /* :: */Block.simpleVariant("::", [
                                                2,
                                                /* :: */Block.simpleVariant("::", [
                                                    3,
                                                    /* [] */0
                                                  ])
                                              ])
                                          ]), Jest.Expect[/* expect */0](Tablecloth.$$Array[/* foldRight */37]((function (element, list) {
                                                    return /* :: */Block.simpleVariant("::", [
                                                              element,
                                                              list
                                                            ]);
                                                  }), /* [] */0, /* array */[
                                                  1,
                                                  2,
                                                  3
                                                ])));
                            }));
              }));
        describe("reverse", (function () {
                Jest.test("reverse empty array", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* reverse */39](/* array */[])));
                      }));
                Jest.test("reverse two elements", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* array */[
                                    1,
                                    0
                                  ], Jest.Expect[/* expect */0](Tablecloth.$$Array[/* reverse */39](/* array */[
                                            0,
                                            1
                                          ])));
                      }));
                return Jest.test("leaves the original array untouched", (function (param) {
                              var array = /* array */[
                                0,
                                1,
                                2,
                                3
                              ];
                              Tablecloth.$$Array[/* reverse */39](array);
                              return Jest.Expect[/* toEqual */12](/* array */[
                                          0,
                                          1,
                                          2,
                                          3
                                        ], Jest.Expect[/* expect */0](array));
                            }));
              }));
        describe("reverseInPlace", (function () {
                return Jest.test("alters an array in-place", (function (param) {
                              var array = /* array */[
                                1,
                                2,
                                3
                              ];
                              Tablecloth.$$Array[/* reverseInPlace */40](array);
                              return Jest.Expect[/* toEqual */12](/* array */[
                                          3,
                                          2,
                                          1
                                        ], Jest.Expect[/* expect */0](array));
                            }));
              }));
        return Jest.test("forEach", (function (param) {
                      var index = /* record */Block.record(["contents"], [0]);
                      var calledValues = /* array */[
                        0,
                        0,
                        0
                      ];
                      Tablecloth.$$Array[/* forEach */42]((function (value) {
                              Tablecloth.$$Array[/* set */15](index[0], value, calledValues);
                              index[0] = index[0] + 1 | 0;
                              return /* () */0;
                            }), /* array */[
                            1,
                            2,
                            3
                          ]);
                      return Jest.Expect[/* toEqual */12](/* array */[
                                  1,
                                  2,
                                  3
                                ], Jest.Expect[/* expect */0](calledValues));
                    }));
      }));

describe("Char", (function () {
        Jest.test("toCode", (function (param) {
                return Jest.Expect[/* toEqual */12](97, Jest.Expect[/* expect */0](Tablecloth.Char[/* toCode */0](/* "a" */97)));
              }));
        describe("fromCode", (function () {
                Jest.test("valid ASCII codes return the corresponding character", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* "a" */97, Jest.Expect[/* expect */0](Tablecloth.Char[/* fromCode */2](97)));
                      }));
                Jest.test("negative integers return none", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Tablecloth.Char[/* fromCode */2](-1)));
                      }));
                return Jest.test("integers greater than 255 return none", (function (param) {
                              return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Tablecloth.Char[/* fromCode */2](256)));
                            }));
              }));
        Jest.test("toString", (function (param) {
                return Jest.Expect[/* toEqual */12]("a", Jest.Expect[/* expect */0](Tablecloth.Char[/* toString */4](/* "a" */97)));
              }));
        describe("fromString", (function () {
                Jest.test("one-length string return Some", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* "a" */97, Jest.Expect[/* expect */0](Tablecloth.Char[/* fromString */6]("a")));
                      }));
                Jest.test("multi character strings return none", (function (param) {
                        return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Tablecloth.Char[/* fromString */6]("abc")));
                      }));
                return Jest.test("zero length strings return none", (function (param) {
                              return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Tablecloth.Char[/* fromString */6]("")));
                            }));
              }));
        describe("toLowercase", (function () {
                Jest.test("converts uppercase ASCII characters to lowercase", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* "a" */97, Jest.Expect[/* expect */0](Tablecloth.Char[/* toLowercase */10](/* "A" */65)));
                      }));
                Jest.test("perserves lowercase characters", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* "a" */97, Jest.Expect[/* expect */0](Tablecloth.Char[/* toLowercase */10](/* "a" */97)));
                      }));
                Jest.test("perserves non-alphabet characters", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* "7" */55, Jest.Expect[/* expect */0](Tablecloth.Char[/* toLowercase */10](/* "7" */55)));
                      }));
                return Jest.test("perserves non-ASCII characters", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* "\233" */233, Jest.Expect[/* expect */0](Tablecloth.Char[/* toUppercase */12](/* "\233" */233)));
                            }));
              }));
        describe("toUppercase", (function () {
                Jest.test("converts lowercase ASCII characters to uppercase", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* "A" */65, Jest.Expect[/* expect */0](Tablecloth.Char[/* toUppercase */12](/* "a" */97)));
                      }));
                Jest.test("perserves uppercase characters", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* "A" */65, Jest.Expect[/* expect */0](Tablecloth.Char[/* toUppercase */12](/* "A" */65)));
                      }));
                Jest.test("perserves non-alphabet characters", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* "7" */55, Jest.Expect[/* expect */0](Tablecloth.Char[/* toUppercase */12](/* "7" */55)));
                      }));
                return Jest.test("perserves non-ASCII characters", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* "\233" */233, Jest.Expect[/* expect */0](Tablecloth.Char[/* toUppercase */12](/* "\233" */233)));
                            }));
              }));
        describe("toDigit", (function () {
                Jest.test("toDigit - converts ASCII characters representing digits into integers", (function (param) {
                        return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](Tablecloth.Char[/* toDigit */8](/* "0" */48)));
                      }));
                Jest.test("toDigit - converts ASCII characters representing digits into integers", (function (param) {
                        return Jest.Expect[/* toEqual */12](8, Jest.Expect[/* expect */0](Tablecloth.Char[/* toDigit */8](/* "8" */56)));
                      }));
                return Jest.test("toDigit - converts ASCII characters representing digits into integers", (function (param) {
                              return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Tablecloth.Char[/* toDigit */8](/* "a" */97)));
                            }));
              }));
        describe("isLowercase", (function () {
                Jest.test("returns true for any lowercase character", (function (param) {
                        return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](Tablecloth.Char[/* isLowercase */14](/* "a" */97)));
                      }));
                Jest.test("returns false for all other characters", (function (param) {
                        return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](Tablecloth.Char[/* isLowercase */14](/* "7" */55)));
                      }));
                return Jest.test("returns false for non-ASCII characters", (function (param) {
                              return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](Tablecloth.Char[/* isLowercase */14](/* "\236" */236)));
                            }));
              }));
        describe("isUppercase", (function () {
                Jest.test("returns true for any uppercase character", (function (param) {
                        return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](Tablecloth.Char[/* isUppercase */16](/* "A" */65)));
                      }));
                Jest.test("returns false for all other characters", (function (param) {
                        return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](Tablecloth.Char[/* isUppercase */16](/* "7" */55)));
                      }));
                return Jest.test("returns false for non-ASCII characters", (function (param) {
                              return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](Tablecloth.Char[/* isLowercase */14](/* "\237" */237)));
                            }));
              }));
        describe("isLetter", (function () {
                Jest.test("returns true for any ASCII alphabet character", (function (param) {
                        return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](Tablecloth.Char[/* isLetter */18](/* "A" */65)));
                      }));
                return Jest.testAll("returns false for all other characters", /* :: */Block.simpleVariant("::", [
                              /* "7" */55,
                              /* :: */Block.simpleVariant("::", [
                                  /* " " */32,
                                  /* :: */Block.simpleVariant("::", [
                                      /* "\n" */10,
                                      /* :: */Block.simpleVariant("::", [
                                          /* "\011" */11,
                                          /* :: */Block.simpleVariant("::", [
                                              /* "\236" */236,
                                              /* [] */0
                                            ])
                                        ])
                                    ])
                                ])
                            ]), (function ($$char) {
                              return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](Tablecloth.Char[/* isLetter */18]($$char)));
                            }));
              }));
        describe("isDigit", (function () {
                Jest.testAll("returns true for digits 0-9", /* :: */Block.simpleVariant("::", [
                        /* "0" */48,
                        /* :: */Block.simpleVariant("::", [
                            /* "1" */49,
                            /* :: */Block.simpleVariant("::", [
                                /* "2" */50,
                                /* :: */Block.simpleVariant("::", [
                                    /* "3" */51,
                                    /* :: */Block.simpleVariant("::", [
                                        /* "4" */52,
                                        /* :: */Block.simpleVariant("::", [
                                            /* "5" */53,
                                            /* :: */Block.simpleVariant("::", [
                                                /* "6" */54,
                                                /* :: */Block.simpleVariant("::", [
                                                    /* "7" */55,
                                                    /* :: */Block.simpleVariant("::", [
                                                        /* "8" */56,
                                                        /* :: */Block.simpleVariant("::", [
                                                            /* "9" */57,
                                                            /* [] */0
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]), (function (digit) {
                        return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](Tablecloth.Char[/* isDigit */20](digit)));
                      }));
                return Jest.test("returns false for all other characters", (function (param) {
                              return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](Tablecloth.Char[/* isDigit */20](/* "a" */97)));
                            }));
              }));
        describe("isAlphanumeric", (function () {
                Jest.test("returns true for any alphabet or digit character", (function (param) {
                        return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](Tablecloth.Char[/* isAlphanumeric */22](/* "A" */65)));
                      }));
                return Jest.test("returns false for all other characters", (function (param) {
                              return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](Tablecloth.Char[/* isAlphanumeric */22](/* "?" */63)));
                            }));
              }));
        describe("isPrintable", (function () {
                Jest.test("returns true for a printable character", (function (param) {
                        return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](Tablecloth.Char[/* isPrintable */24](/* "~" */126)));
                      }));
                return Jest.test("returns false for non-printable character", (function (param) {
                              return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](Tablecloth.$$Option[/* map */5](Tablecloth.Char[/* isPrintable */24], Tablecloth.Char[/* fromCode */2](31))));
                            }));
              }));
        describe("isWhitespace", (function () {
                Jest.test("returns true for any whitespace character", (function (param) {
                        return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](Tablecloth.Char[/* isWhitespace */26](/* " " */32)));
                      }));
                return Jest.test("returns false for a non-whitespace character", (function (param) {
                              return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](Tablecloth.Char[/* isWhitespace */26](/* "a" */97)));
                            }));
              }));
        return /* () */0;
      }));

describe("List", (function () {
        describe("reverse", (function () {
                Jest.test("reverse empty list", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* [] */0, Jest.Expect[/* expect */0](Tablecloth.List[/* reverse */37](/* [] */0)));
                      }));
                Jest.test("reverse one element", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* :: */Block.simpleVariant("::", [
                                      0,
                                      /* [] */0
                                    ]), Jest.Expect[/* expect */0](Tablecloth.List[/* reverse */37](/* :: */Block.simpleVariant("::", [
                                              0,
                                              /* [] */0
                                            ]))));
                      }));
                return Jest.test("reverse two elements", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* :: */Block.simpleVariant("::", [
                                            1,
                                            /* :: */Block.simpleVariant("::", [
                                                0,
                                                /* [] */0
                                              ])
                                          ]), Jest.Expect[/* expect */0](Tablecloth.List[/* reverse */37](/* :: */Block.simpleVariant("::", [
                                                    0,
                                                    /* :: */Block.simpleVariant("::", [
                                                        1,
                                                        /* [] */0
                                                      ])
                                                  ]))));
                            }));
              }));
        describe("map2", (function () {
                Jest.test("map2 empty lists", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* [] */0, Jest.Expect[/* expect */0](Tablecloth.List[/* map2 */8]((function (prim, prim$1) {
                                              return prim + prim$1 | 0;
                                            }), /* [] */0, /* [] */0)));
                      }));
                Jest.test("map2 one element", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* :: */Block.simpleVariant("::", [
                                      2,
                                      /* [] */0
                                    ]), Jest.Expect[/* expect */0](Tablecloth.List[/* map2 */8]((function (prim, prim$1) {
                                              return prim + prim$1 | 0;
                                            }), /* :: */Block.simpleVariant("::", [
                                              1,
                                              /* [] */0
                                            ]), /* :: */Block.simpleVariant("::", [
                                              1,
                                              /* [] */0
                                            ]))));
                      }));
                return Jest.test("map2 two elements", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* :: */Block.simpleVariant("::", [
                                            2,
                                            /* :: */Block.simpleVariant("::", [
                                                4,
                                                /* [] */0
                                              ])
                                          ]), Jest.Expect[/* expect */0](Tablecloth.List[/* map2 */8]((function (prim, prim$1) {
                                                    return prim + prim$1 | 0;
                                                  }), /* :: */Block.simpleVariant("::", [
                                                    1,
                                                    /* :: */Block.simpleVariant("::", [
                                                        2,
                                                        /* [] */0
                                                      ])
                                                  ]), /* :: */Block.simpleVariant("::", [
                                                    1,
                                                    /* :: */Block.simpleVariant("::", [
                                                        2,
                                                        /* [] */0
                                                      ])
                                                  ]))));
                            }));
              }));
        describe("indexedMap", (function () {
                Jest.test("indexedMap empty list", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* [] */0, Jest.Expect[/* expect */0](Tablecloth.List[/* indexedMap */5]((function (i, param) {
                                              return i;
                                            }), /* [] */0)));
                      }));
                Jest.test("indexedMap one element", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* :: */Block.simpleVariant("::", [
                                      0,
                                      /* [] */0
                                    ]), Jest.Expect[/* expect */0](Tablecloth.List[/* indexedMap */5]((function (i, param) {
                                              return i;
                                            }), /* :: */Block.simpleVariant("::", [
                                              /* "a" */97,
                                              /* [] */0
                                            ]))));
                      }));
                return Jest.test("indexedMap two elements", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* :: */Block.simpleVariant("::", [
                                            0,
                                            /* :: */Block.simpleVariant("::", [
                                                1,
                                                /* [] */0
                                              ])
                                          ]), Jest.Expect[/* expect */0](Tablecloth.List[/* indexedMap */5]((function (i, param) {
                                                    return i;
                                                  }), /* :: */Block.simpleVariant("::", [
                                                    /* "a" */97,
                                                    /* :: */Block.simpleVariant("::", [
                                                        /* "b" */98,
                                                        /* [] */0
                                                      ])
                                                  ]))));
                            }));
              }));
        describe("partition", (function () {
                Jest.test("empty list", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* tuple */[
                                    /* [] */0,
                                    /* [] */0
                                  ], Jest.Expect[/* expect */0](Tablecloth.List[/* partition */28]((function (x) {
                                              return x % 2 === 0;
                                            }), /* [] */0)));
                      }));
                Jest.test("one element", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* tuple */[
                                    /* [] */0,
                                    /* :: */Block.simpleVariant("::", [
                                        1,
                                        /* [] */0
                                      ])
                                  ], Jest.Expect[/* expect */0](Tablecloth.List[/* partition */28]((function (x) {
                                              return x % 2 === 0;
                                            }), /* :: */Block.simpleVariant("::", [
                                              1,
                                              /* [] */0
                                            ]))));
                      }));
                return Jest.test("four elements", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* tuple */[
                                          /* :: */Block.simpleVariant("::", [
                                              2,
                                              /* :: */Block.simpleVariant("::", [
                                                  4,
                                                  /* [] */0
                                                ])
                                            ]),
                                          /* :: */Block.simpleVariant("::", [
                                              1,
                                              /* :: */Block.simpleVariant("::", [
                                                  3,
                                                  /* [] */0
                                                ])
                                            ])
                                        ], Jest.Expect[/* expect */0](Tablecloth.List[/* partition */28]((function (x) {
                                                    return x % 2 === 0;
                                                  }), /* :: */Block.simpleVariant("::", [
                                                    1,
                                                    /* :: */Block.simpleVariant("::", [
                                                        2,
                                                        /* :: */Block.simpleVariant("::", [
                                                            3,
                                                            /* :: */Block.simpleVariant("::", [
                                                                4,
                                                                /* [] */0
                                                              ])
                                                          ])
                                                      ])
                                                  ]))));
                            }));
              }));
        describe("minimumBy", (function () {
                Jest.test("minimumBy non-empty list", (function (param) {
                        return Jest.Expect[/* toEqual */12](15, Jest.Expect[/* expect */0](Tablecloth.List[/* minimumBy */50]((function (x) {
                                              return x % 12;
                                            }), /* :: */Block.simpleVariant("::", [
                                              7,
                                              /* :: */Block.simpleVariant("::", [
                                                  9,
                                                  /* :: */Block.simpleVariant("::", [
                                                      15,
                                                      /* :: */Block.simpleVariant("::", [
                                                          10,
                                                          /* :: */Block.simpleVariant("::", [
                                                              3,
                                                              /* :: */Block.simpleVariant("::", [
                                                                  22,
                                                                  /* [] */0
                                                                ])
                                                            ])
                                                        ])
                                                    ])
                                                ])
                                            ]))));
                      }));
                return Jest.test("minimumBy empty list", (function (param) {
                              return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Tablecloth.List[/* minimumBy */50]((function (x) {
                                                    return x % 12;
                                                  }), /* [] */0)));
                            }));
              }));
        describe("maximumBy", (function () {
                Jest.test("maximumBy non-empty list", (function (param) {
                        return Jest.Expect[/* toEqual */12](10, Jest.Expect[/* expect */0](Tablecloth.List[/* maximumBy */53]((function (x) {
                                              return x % 12;
                                            }), /* :: */Block.simpleVariant("::", [
                                              7,
                                              /* :: */Block.simpleVariant("::", [
                                                  9,
                                                  /* :: */Block.simpleVariant("::", [
                                                      15,
                                                      /* :: */Block.simpleVariant("::", [
                                                          10,
                                                          /* :: */Block.simpleVariant("::", [
                                                              3,
                                                              /* :: */Block.simpleVariant("::", [
                                                                  22,
                                                                  /* [] */0
                                                                ])
                                                            ])
                                                        ])
                                                    ])
                                                ])
                                            ]))));
                      }));
                return Jest.test("maximumBy empty list", (function (param) {
                              return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Tablecloth.List[/* maximumBy */53]((function (x) {
                                                    return x % 12;
                                                  }), /* [] */0)));
                            }));
              }));
        describe("minimum", (function () {
                Jest.test("minimum non-empty list", (function (param) {
                        return Jest.Expect[/* toEqual */12](3, Jest.Expect[/* expect */0](Tablecloth.List[/* minimum */52](/* :: */Block.simpleVariant("::", [
                                              7,
                                              /* :: */Block.simpleVariant("::", [
                                                  9,
                                                  /* :: */Block.simpleVariant("::", [
                                                      15,
                                                      /* :: */Block.simpleVariant("::", [
                                                          10,
                                                          /* :: */Block.simpleVariant("::", [
                                                              3,
                                                              /* [] */0
                                                            ])
                                                        ])
                                                    ])
                                                ])
                                            ]))));
                      }));
                return Jest.test("minimum empty list", (function (param) {
                              return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Tablecloth.List[/* minimum */52](/* [] */0)));
                            }));
              }));
        describe("maximum", (function () {
                Jest.test("maximum non-empty list", (function (param) {
                        return Jest.Expect[/* toEqual */12](15, Jest.Expect[/* expect */0](Tablecloth.List[/* maximum */55](/* :: */Block.simpleVariant("::", [
                                              7,
                                              /* :: */Block.simpleVariant("::", [
                                                  9,
                                                  /* :: */Block.simpleVariant("::", [
                                                      15,
                                                      /* :: */Block.simpleVariant("::", [
                                                          10,
                                                          /* :: */Block.simpleVariant("::", [
                                                              3,
                                                              /* [] */0
                                                            ])
                                                        ])
                                                    ])
                                                ])
                                            ]))));
                      }));
                return Jest.test("maximum empty list", (function (param) {
                              return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Tablecloth.List[/* maximum */55](/* [] */0)));
                            }));
              }));
        describe("split_when", (function () {
                Jest.test("empty list", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* tuple */[
                                    /* [] */0,
                                    /* [] */0
                                  ], Jest.Expect[/* expect */0](Tablecloth.List[/* split_when */66]((function (x) {
                                              return x % 2 === 0;
                                            }), /* [] */0)));
                      }));
                Jest.test("at zero", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* tuple */[
                                    /* [] */0,
                                    /* :: */Block.simpleVariant("::", [
                                        2,
                                        /* :: */Block.simpleVariant("::", [
                                            4,
                                            /* :: */Block.simpleVariant("::", [
                                                6,
                                                /* [] */0
                                              ])
                                          ])
                                      ])
                                  ], Jest.Expect[/* expect */0](Tablecloth.List[/* split_when */66]((function (x) {
                                              return x % 2 === 0;
                                            }), /* :: */Block.simpleVariant("::", [
                                              2,
                                              /* :: */Block.simpleVariant("::", [
                                                  4,
                                                  /* :: */Block.simpleVariant("::", [
                                                      6,
                                                      /* [] */0
                                                    ])
                                                ])
                                            ]))));
                      }));
                Jest.test("four elements", (function (param) {
                        return Jest.Expect[/* toEqual */12](/* tuple */[
                                    /* :: */Block.simpleVariant("::", [
                                        1,
                                        /* :: */Block.simpleVariant("::", [
                                            3,
                                            /* [] */0
                                          ])
                                      ]),
                                    /* :: */Block.simpleVariant("::", [
                                        2,
                                        /* :: */Block.simpleVariant("::", [
                                            4,
                                            /* [] */0
                                          ])
                                      ])
                                  ], Jest.Expect[/* expect */0](Tablecloth.List[/* split_when */66]((function (x) {
                                              return x % 2 === 0;
                                            }), /* :: */Block.simpleVariant("::", [
                                              1,
                                              /* :: */Block.simpleVariant("::", [
                                                  3,
                                                  /* :: */Block.simpleVariant("::", [
                                                      2,
                                                      /* :: */Block.simpleVariant("::", [
                                                          4,
                                                          /* [] */0
                                                        ])
                                                    ])
                                                ])
                                            ]))));
                      }));
                return Jest.test("at end", (function (param) {
                              return Jest.Expect[/* toEqual */12](/* tuple */[
                                          /* :: */Block.simpleVariant("::", [
                                              1,
                                              /* :: */Block.simpleVariant("::", [
                                                  3,
                                                  /* :: */Block.simpleVariant("::", [
                                                      5,
                                                      /* [] */0
                                                    ])
                                                ])
                                            ]),
                                          /* [] */0
                                        ], Jest.Expect[/* expect */0](Tablecloth.List[/* split_when */66]((function (x) {
                                                    return x % 2 === 0;
                                                  }), /* :: */Block.simpleVariant("::", [
                                                    1,
                                                    /* :: */Block.simpleVariant("::", [
                                                        3,
                                                        /* :: */Block.simpleVariant("::", [
                                                            5,
                                                            /* [] */0
                                                          ])
                                                      ])
                                                  ]))));
                            }));
              }));
        return /* () */0;
      }));

describe("String", (function () {
        Jest.test("length empty string", (function (param) {
                return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](Tablecloth.$$String[/* length */0]("")));
              }));
        Jest.test("length", (function (param) {
                return Jest.Expect[/* toEqual */12](3, Jest.Expect[/* expect */0](Tablecloth.$$String[/* length */0]("123")));
              }));
        Jest.test("reverse empty string", (function (param) {
                return Jest.Expect[/* toEqual */12]("", Jest.Expect[/* expect */0](Tablecloth.$$String[/* reverse */26]("")));
              }));
        return Jest.test("reverse", (function (param) {
                      return Jest.Expect[/* toEqual */12]("desserts", Jest.Expect[/* expect */0](Tablecloth.$$String[/* reverse */26]("stressed")));
                    }));
      }));

describe("Tuple2", (function () {
        Jest.test("create", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            3,
                            4
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple2[/* create */0](3, 4)));
              }));
        Jest.test("first", (function (param) {
                return Jest.Expect[/* toEqual */12](3, Jest.Expect[/* expect */0](Tablecloth.Tuple2[/* first */1](/* tuple */[
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("second", (function (param) {
                return Jest.Expect[/* toEqual */12](4, Jest.Expect[/* expect */0](Tablecloth.Tuple2[/* second */2](/* tuple */[
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("mapFirst", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            "desserts",
                            16
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple2[/* mapFirst */3](Tablecloth.$$String[/* reverse */26], /* tuple */[
                                    "stressed",
                                    16
                                  ])));
              }));
        Jest.test("mapSecond", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            "stressed",
                            4
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple2[/* mapSecond */5]((function (prim) {
                                      return Math.sqrt(prim);
                                    }), /* tuple */[
                                    "stressed",
                                    16
                                  ])));
              }));
        Jest.test("mapEach", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            "desserts",
                            4
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple2[/* mapEach */7](Tablecloth.$$String[/* reverse */26], (function (prim) {
                                      return Math.sqrt(prim);
                                    }), /* tuple */[
                                    "stressed",
                                    16
                                  ])));
              }));
        Jest.test("mapAll", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            "saw",
                            "desserts"
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple2[/* mapAll */9](Tablecloth.$$String[/* reverse */26], /* tuple */[
                                    "was",
                                    "stressed"
                                  ])));
              }));
        Jest.test("swap", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            4,
                            3
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple2[/* swap */11](/* tuple */[
                                    3,
                                    4
                                  ])));
              }));
        Jest.test("curry", (function (param) {
                var tupleAdder = function (param) {
                  return param[0] + param[1] | 0;
                };
                return Jest.Expect[/* toEqual */12](7, Jest.Expect[/* expect */0](Tablecloth.Tuple2[/* curry */12](tupleAdder, 3, 4)));
              }));
        Jest.test("uncurry", (function (param) {
                var curriedAdder = function (a, b) {
                  return a + b | 0;
                };
                return Jest.Expect[/* toEqual */12](7, Jest.Expect[/* expect */0](Tablecloth.Tuple2[/* uncurry */13](curriedAdder, /* tuple */[
                                    3,
                                    4
                                  ])));
              }));
        return Jest.test("toList", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* :: */Block.simpleVariant("::", [
                                    3,
                                    /* :: */Block.simpleVariant("::", [
                                        4,
                                        /* [] */0
                                      ])
                                  ]), Jest.Expect[/* expect */0](Tablecloth.Tuple2[/* toList */14](/* tuple */[
                                          3,
                                          4
                                        ])));
                    }));
      }));

describe("Tuple3", (function () {
        Jest.test("create", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            3,
                            4,
                            5
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* create */0](3, 4, 5)));
              }));
        Jest.test("first", (function (param) {
                return Jest.Expect[/* toEqual */12](3, Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* first */1](/* tuple */[
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("second", (function (param) {
                return Jest.Expect[/* toEqual */12](4, Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* second */2](/* tuple */[
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("third", (function (param) {
                return Jest.Expect[/* toEqual */12](5, Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* third */3](/* tuple */[
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("init", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            3,
                            4
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* init */4](/* tuple */[
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("tail", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            4,
                            5
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* tail */5](/* tuple */[
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("mapFirst", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            "desserts",
                            16,
                            false
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* mapFirst */6](Tablecloth.$$String[/* reverse */26], /* tuple */[
                                    "stressed",
                                    16,
                                    false
                                  ])));
              }));
        Jest.test("mapSecond", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            "stressed",
                            4,
                            false
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* mapSecond */8]((function (prim) {
                                      return Math.sqrt(prim);
                                    }), /* tuple */[
                                    "stressed",
                                    16,
                                    false
                                  ])));
              }));
        Jest.test("mapThird", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            "stressed",
                            16,
                            true
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* mapThird */10]((function (prim) {
                                      return !prim;
                                    }), /* tuple */[
                                    "stressed",
                                    16,
                                    false
                                  ])));
              }));
        Jest.test("mapEach", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            "desserts",
                            4,
                            true
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* mapEach */12](Tablecloth.$$String[/* reverse */26], (function (prim) {
                                      return Math.sqrt(prim);
                                    }), (function (prim) {
                                      return !prim;
                                    }), /* tuple */[
                                    "stressed",
                                    16,
                                    false
                                  ])));
              }));
        Jest.test("mapAll", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            "saw",
                            "desserts",
                            "won"
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* mapAll */14](Tablecloth.$$String[/* reverse */26], /* tuple */[
                                    "was",
                                    "stressed",
                                    "now"
                                  ])));
              }));
        Jest.test("rotateLeft", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            4,
                            5,
                            3
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* rotateLeft */16](/* tuple */[
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("rotateRight", (function (param) {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            5,
                            3,
                            4
                          ], Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* rotateRight */18](/* tuple */[
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        Jest.test("curry", (function (param) {
                var tupleAdder = function (param) {
                  return (param[0] + param[1] | 0) + param[2] | 0;
                };
                return Jest.Expect[/* toEqual */12](12, Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* curry */20](tupleAdder, 3, 4, 5)));
              }));
        Jest.test("uncurry", (function (param) {
                var curriedAdder = function (a, b, c) {
                  return (a + b | 0) + c | 0;
                };
                return Jest.Expect[/* toEqual */12](12, Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* uncurry */21](curriedAdder, /* tuple */[
                                    3,
                                    4,
                                    5
                                  ])));
              }));
        return Jest.test("toList", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* :: */Block.simpleVariant("::", [
                                    3,
                                    /* :: */Block.simpleVariant("::", [
                                        4,
                                        /* :: */Block.simpleVariant("::", [
                                            5,
                                            /* [] */0
                                          ])
                                      ])
                                  ]), Jest.Expect[/* expect */0](Tablecloth.Tuple3[/* toList */22](/* tuple */[
                                          3,
                                          4,
                                          5
                                        ])));
                    }));
      }));

/*  Not a pure module */
